# 병사 배치하기
# n명의 병사가 무작위로 나열되어 있다.
# 각 병사는 특정한 값의 전투력을 보유하고 있다.
# 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치하고자 한다.
# 앞쪽에 있는 병사의 전투력은 항상 뒤쪽에 있는 병사보다 높아야한다.
# 또한 배치 과정에서 특정한 위치에 있는 병사를 열외시키는 방법을 이용, 그러면서도 남아 있는 병사의 수가 최대가 되도록 한다.
# 병사에 대한 정보가 주어졌을 때, 남아있는 병사의 수가 최대가 되도록 하기 위해서 열외시켜야 하는 병사의 수를 출력하는 프로그램을 작성

# 문제 해결 아이디어
# 가장 긴 증가하는 부분 수열(Longest Increasing Subsequence, LIS)로 알려진 전형적인 다이나믹 프로그래밍 문제의 아이디어와 같다
# 예를 들어 하나의 수열 array = {4,2,5,8,4,11,15} 이 있다
#     이 수열의 가장 긴 증가하는 부분 수열은 {4,5,8,11,15}이다
# 본 문제는 가장 긴 감소하는 부분 수열을 찾는 문제로 치환 가능하다.
# LIS 알고리즘을 조금 수정하여 적용함으로써 정답을 도출할 수 있다.

# LIS 알고리즘
# D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이
# 모든 0 <= j < i 에 대해, D[i] = max(D[i], D[j]+1) if array[j] < array[i]

n = int(input())
array = list(map(int, input().split()))
# 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
array.reverse()

# 다이나믹 프로그래밍을 위한 1차원 DP테이블 초기화
dp = [1] * n

# 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행
for i in range(1,n):
    for j in range(0, i):
        if array[j] < array[i]:
            dp[i] = max(dp[i], dp[j]+1)

# 열외해야 하는 병사의 최소 수
print(n-max(dp))

# 입력예시                   출력
# 7                         2
# 15 11 4 8 5 2 4
# ==> {15,11,8,5,4}
