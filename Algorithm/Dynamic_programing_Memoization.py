# (하향식 구조) 다이나믹 프로그래밍 구현 ==> 메모이제이션
# 한 번 계산한 결과를 메모리 공간에 메모
#     - 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴
#     - 값을 기록해 놓는다는 점에서 캐싱이라고도 함
# 시간 복잡도 O(N)

# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d = [0] *100

# 피보나치 함수를 재귀함수로 구현(탑다운-하향식 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건
    if x==1 or x==2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] !=0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 다라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))


# 보텀업-상향식 방식
d = [0]*100

# 첫 번째 피보나치 수와 두 번째 피보나치 수 =1
d[1] = 1
d[2] = 1
n=99

# 피보나치 함수를 반복문으로 구현 (보텀업 다이나믹 프로그래밍)
for i in range(3,n+1):
    d[i] = d[i-1] + d[i-2]

print(d[n])
