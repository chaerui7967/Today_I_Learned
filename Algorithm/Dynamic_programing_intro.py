# 다이나믹 프로그래밍(동적 계획법)
# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
# 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 탑다운(하향식)과 보텀업(상향식) 방식으로 구성됨
# 다이나믹 프로그래밍의 정형적인 형태는 보텀업 방식(반복문 활용)
# 결과 저장용 리스트는 DP테이블이라고 부름

# 자료구조에서 동적 할당은 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법
# 반면 알고리즘에서 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없음

# 다음 조건을 만족할 때 사용가능
# 1. 최적 부분 구조 (Optimal Substructure)
#     - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제 해결 가능
# 2. 중복되는 부분 문제 (Overlapping Subproblem)
#     - 동일한 작은 문제를 반복적으로 해결

# 예시 문제 - 피보나치 수열 계산
# 점화식? = 인접한 항들 사이의 관계식
# A(n) = A(n-1) + A(n-2)
# 수열을 배열이나 리스트를 이용해 표현

def fibo(x):
    if x==1 or x==2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))
# 시간 복잡도
# - 세타 표기법 : O(1.618**N)
# - 빅오 표기법 : O(2**N)  --> 수행시간이 너무 커짐

# ==> 다이나믹 프로그래밍으로 해결
# 중복되는 부분문제가 존재, 최적 부분 구조 존재 == 사용 조건 만족



