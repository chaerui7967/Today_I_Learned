# 다이나믹 프로그래밍(동적 계획법)
# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
# 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# 탑다운(하향식)과 보텀업(상향식) 방식으로 구성됨
# 다이나믹 프로그래밍의 정형적인 형태는 보텀업 방식(반복문 활용)
# 결과 저장용 리스트는 DP테이블이라고 부름

# 자료구조에서 동적 할당은 프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법
# 반면 알고리즘에서 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없음

# 다음 조건을 만족할 때 사용가능
# 1. 최적 부분 구조 (Optimal Substructure)
#     - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제 해결 가능
# 2. 중복되는 부분 문제 (Overlapping Subproblem)
#     - 동일한 작은 문제를 반복적으로 해결

# 예시 문제 - 피보나치 수열 계산
# 점화식? = 인접한 항들 사이의 관계식
# A(n) = A(n-1) + A(n-2)
# 수열을 배열이나 리스트를 이용해 표현

def fibo(x):
    if x==1 or x==2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))
# 시간 복잡도
# - 세타 표기법 : O(1.618**N)
# - 빅오 표기법 : O(2**N)  --> 수행시간이 너무 커짐

# ==> 다이나믹 프로그래밍으로 해결
# 중복되는 부분문제가 존재, 최적 부분 구조 존재 == 사용 조건 만족


# 다이나믹 프로그래밍 vs 분할 정복
# 다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용가능
#     - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결
# 다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복
#     - 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복
#     - 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음

# 분할 정복 -  퀵 정렬
#     - 한 번 기준 원소가 자리를 변경해서 자리를 확보하면 원소의 위치는 변경되지 않음
#     - 분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출하지 않음


# 다이나믹 프로그래밍 문제에 접근하는 방법
# 1. 주어진 문제가 다이나믹 프로그래밍 유형임을 파악
# 2. 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는 지 검토
#     - 다른 알고리즘으로 풀이방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려
# 3. 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤 작은 문제에서 구한 답이
# 큰 문제에 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용
# 4. 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음
