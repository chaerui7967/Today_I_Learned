# 그리디 알고리즘
# 1이 될 때까지
# 어떤 수 n이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 함
# 단, 두번째 연산은 n이 k로 나누어 떨어질 때만 선택할 수 있다.
# 1. n에서 1을 뺌
# 2. n을 k로 나눕
# n과 k가 주어질때 n이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야하는 최소 횟수를 구하는 프로그램 작성

# 예를 들어 n=17,k=4 라면, 이때 1번의 과정을 한번 수행하면 n=16이 되고 이후 2번의 과정을 두번 수행하면 n=1이됨
# 이는 n을 1로 만드는 최소 횟수

# 해결 아이디어
# 주어진 n에 대해 최대한 많이 나누기 수행

# 정당성 분석
# 가능하면 최대한 많이 나누는 작업이 최적해를 보장할 수 있을까?
# n이 아무리 큰수 여도 k로 계속 나눈다면 기하급수적으로 빠르게 줄일 수 있다.
# k가 2이상이기만 하면 k로 나누는 것이 1을 빼는 것보다 항상 빠르게 n을 줄일 수 있음

n ,k = map(int,input().split())
result = 0

while True:
    # n이 k로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n//k) * k
    result += (n-target)
    n = target
    # n이 k보다 작을 때 반복문 탈출
    if n < k:
        break
    # k로 나누기
    result += 1
    n //= k

# 마지막으로 남은 수에 대해 1씩 빼기
result += (n-1)
print(result)