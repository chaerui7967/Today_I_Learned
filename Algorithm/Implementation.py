# 구현 : 머리속에 있는 알고리즘을 소스코드로 바꾸는 과정
# 흔히 알고리즘 대회에서 구현 유형 문제란
#     풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제

# 구현유형의 예시
# 1. 알고리즘은 간단한데 코드가 지나칠 만큼 길어지는 문제
# 2. 실수 연산을 다루고, 특정 소수점 자리까지 출력해야 하는 문제
# 3. 문자열을 특정한 기준에 따라 끊어 처리해야 하는 문제
# 4. 적절한 라이브러리를 찾아서 사용해야 하는 문제

# 일반적으로 알고리즘 문제에서의 2차원 공간은 행렬의 의미로 사용됨
# 시뮬레이션 및 완전 탐색 문제에서는 2차원 공간에서의 방향 벡터가 자주 활용됨

# 상하좌우 문제
# 여행가 A는 n * n 크기의 정사각형 공간 위에 서있다.
# 이 공간은 1 *1 크기의 정사각형으로 나누어져 있다.
# 가장 왼쪽 위 좌표는 (1,1)이며, 가장 오른쪽 아래 좌표는 (n,n)에 해당한다.
# 여행가 A는 상,하,좌,우 방향으로 이동가능하며, 시작 좌표는 항상 (1,1)이다.
# 여행가 A의 계획서에는 하나의 줄에 띄어쓰기를 기준으로하여 LRUD중 하나의 문자가 반복적으로 적혀있다.
# - L : 왼쪽 한칸 이동
# - R : 오른쪽 한칸 이동
# - U : 위로 한칸 이동
# - D : 아래로 한칸 이동
# 이때 여행가 A가 n*n 크기의 정사각형 공간을 벗어나는 움직임은 무시

# 해결 아이디어
# 일련의 명령에 따라서 개체를 차례대로 이동시킨다는 점에서 시뮬레이션 유형으로 분류
#     다만, 알고리즘 교재나 문제 풀이 사이트에 따라 다르게 일컬을 수 있으므로, 코딩테스트에서의 시뮬레이션 유형,
#     구현 유형, 완전 탐색 유형은 서로 유사한 점이 많다는 정도로만 기억

n = int(input())
x, y = 1,1
plans = input().split()

# L, R, U, D 에 따른 이동 방향
dx = [0,0,-1,1]
dy = [-1,1,0,0]
move_types = ['L','R','U','D']

# 이동 계획을 하나씩 확인
for plan in plans:
    # 이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x+dx[i]
            ny = y+dy[i]
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n :
        continue
    # 이동 수행
    x, y = nx, ny

print(x,y)

# 입력 예시                    출력
# 5                           3 4
# R R R U D D
