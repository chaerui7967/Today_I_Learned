# Silver 5_1018

# 지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M*N 크기의 보드를 찾았다.
# 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다.
# 지민이는 이 보드를 잘라서 8*8 크기의 체스판으로 만들려고 한다.
# 체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로,
# 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고,
# 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다.
# 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다.
# 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.
# 보드가 체스판처럼 칠해져 있다는 보장이 없어서,
# 지민이는 8*8 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다.
# 당연히 8*8 크기는 아무데서나 골라도 된다.
# 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.

# 브루트포스 문제 ## 모든 경우의 수를 다 구해서 최적의 해를 구함

n, m = map(int,input().split())
board = list()
for i in range(n):
    board.append(input())
repair = list()

for i in range(n-7):  # 인덱스가 넘어가는 걸 방지하고자 최대 인덱스의 -7까지를 범위로 잡는다
    for j in range(m-7):
        first_w = 0
        first_b = 0
        for k in range(i,i+8):  # 시작점 부터 8개를 순차적으로 확인
            for l in range(j,j+8):  # 인덱스의 홀수,짝수를 기준으로 하얀색, 검은색을 판단
                if (k + l) % 2 == 0:  # 0행 + 0번째 짝수, 1행 0번째 홀수 ...
                    if board[k][l] != 'W':  # 모든 경우의 수를 repair 리스트에 추가
                        first_w += 1
                    if board[k][l] != 'B':
                        first_b += 1
                else:
                    if board[k][l] != 'B':
                        first_w += 1
                    if board[k][l] != 'W':
                        first_b += 1
        repair.append(first_w)
        repair.append(first_b)
print(min(repair))  # 모든 바뀌는 경우를 확인 했을 때 최소값을 출력
